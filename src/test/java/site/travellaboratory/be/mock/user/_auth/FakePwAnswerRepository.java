package site.travellaboratory.be.mock.user._auth;

import site.travellaboratory.be.user.application.port.PwAnswerRepository;
import site.travellaboratory.be.user.domain._pw.PwAnswer;
import site.travellaboratory.be.user.domain._pw.enums.PwAnswerStatus;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

public class FakePwAnswerRepository implements PwAnswerRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<PwAnswer> data = new ArrayList<>();

    @Override
    public PwAnswer getByUserIdAndStatus(Long userId, PwAnswerStatus status) {
        return data.stream()
            .filter(pwAnswer -> Objects.equals(pwAnswer.getUserId(), userId) && pwAnswer.getStatus() == status)
            .findFirst()
            .orElseThrow(() -> new IllegalArgumentException("PwAnswer not found"));
    }

    @Override
    public Optional<PwAnswer> findByUserIdAndPwQuestionIdAndAnswerAndStatus(Long userId, Long pwQuestionId, String answer, PwAnswerStatus status) {
        return data.stream()
            .filter(pwAnswer -> Objects.equals(pwAnswer.getUserId(), userId) &&
                                Objects.equals(pwAnswer.getPwQuestionId(), pwQuestionId) &&
                                Objects.equals(pwAnswer.getAnswer(), answer) &&
                                pwAnswer.getStatus() == status)
            .findFirst();
    }

    @Override
    public PwAnswer save(PwAnswer pwAnswer) {
        if (Objects.isNull(pwAnswer.getId())) {
            final PwAnswer createPwAnswer = PwAnswer.builder()
                .id(autoGeneratedId.incrementAndGet())
                .userId(pwAnswer.getUserId())
                .pwQuestionId(pwAnswer.getPwQuestionId())
                .answer(pwAnswer.getAnswer())
                .status(pwAnswer.getStatus())
                .build();
            data.add(createPwAnswer);
            return createPwAnswer;
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), pwAnswer.getId()));
            data.add(pwAnswer);
            return pwAnswer;
        }
    }
}
