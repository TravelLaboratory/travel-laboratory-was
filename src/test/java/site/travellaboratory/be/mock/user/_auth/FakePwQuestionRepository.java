package site.travellaboratory.be.mock.user._auth;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;
import site.travellaboratory.be.user.application.port.PwQuestionRepository;
import site.travellaboratory.be.user.domain._pw.PwQuestion;
import site.travellaboratory.be.user.domain._pw.enums.PwQuestionStatus;

public class FakePwQuestionRepository implements PwQuestionRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<PwQuestion> data = new ArrayList<>();

    @Override
    public Optional<PwQuestion> findByIdAndStatus(Long pwQuestionId, PwQuestionStatus status) {
        return data.stream()
            .filter(pwQuestion -> Objects.equals(pwQuestion.getId(), pwQuestionId) && pwQuestion.getStatus() == status)
            .findFirst();
    }

    @Override
    public PwQuestion save(PwQuestion pwQuestion) {
        if (Objects.isNull(pwQuestion.getId())) {
            final PwQuestion createPwQuestion = PwQuestion.builder()
                .id(autoGeneratedId.incrementAndGet())
                .question(pwQuestion.getQuestion())
                .status(pwQuestion.getStatus())
                .build();
            data.add(createPwQuestion);
            return createPwQuestion;
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), pwQuestion.getId()));
            data.add(pwQuestion);
            return pwQuestion;
        }
    }
}
