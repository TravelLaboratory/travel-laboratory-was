package site.travellaboratory.be.mock.user;

import site.travellaboratory.be.user.application.port.UserRepository;
import site.travellaboratory.be.user.domain.User;
import site.travellaboratory.be.user.domain.enums.UserStatus;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

public class FakeUserRepository implements UserRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<User> data = new ArrayList<>();

    @Override
    public Optional<User> findByIdAndStatus(Long userId, UserStatus status) {
        return data.stream()
            .filter(user -> Objects.equals(user.getId(), userId) && user.getStatus() == status)
            .findFirst();
    }

    @Override
    public Optional<User> findByUsernameAndStatusOrderByIdDesc(String username, UserStatus status) {
        return data.stream()
            .filter(user -> Objects.equals((user.getUsername()), username) && user.getStatus() == status)
            .findFirst();
    }

    @Override
    public Optional<User> findByNickname(String nickname) {
        return data.stream()
            .filter(user -> Objects.equals(user.getNickname(), nickname))
            .findFirst();
    }
    public User save(final User user) {
        if (Objects.isNull(user.getId())) {
            final User createUser = User.builder()
                .id(autoGeneratedId.incrementAndGet())
                .username(user.getUsername())
                .password(user.getPassword())
                .role(user.getRole())
                .nickname(user.getNickname())
                .profileImgUrl(user.getProfileImgUrl())
                .introduce(user.getIntroduce())
                .isAgreement(user.getIsAgreement())
                .status(user.getStatus())
                .build();
            data.add(createUser);
            return createUser;
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), user.getId()));
            data.add(user);
            return user;
        }
    }
}
