package site.travellaboratory.be.test.mock.article;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;
import site.travellaboratory.be.article.application.port.ArticleRepository;
import site.travellaboratory.be.article.domain.Article;
import site.travellaboratory.be.article.domain.enums.ArticleStatus;

public class FakeArticleRepository implements ArticleRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<Article> data = new ArrayList<>();

    @Override
    public Optional<Article> findByIdAndStatus(Long articleId, ArticleStatus status) {
        return data.stream()
            .filter(article -> article.getId().equals(articleId) && status.equals(article.getStatus()))
            .findFirst();
    }

    public Article save(final Article article) {
        if (article.getId() == null) {
            final Article createdArticle = Article.builder()
                .id(autoGeneratedId.incrementAndGet())
                .user(article.getUser())
                .title(article.getTitle())
                .locations(article.getLocations())
                .startAt(article.getStartAt())
                .endAt(article.getEndAt())
                .expense(article.getExpense())
                .travelCompanion(article.getTravelCompanion())
                .travelStyles(article.getTravelStyles())
                .coverImgUrl(article.getCoverImgUrl())
                .status(article.getStatus())
                .build();
            data.add(createdArticle);
            return createdArticle;
        } else {
            data.removeIf(item -> item.getId().equals(article.getId()));
            data.add(article);
            return article;
        }
    }
}
