package site.travellaboratory.be.test.mock.review;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;
import site.travellaboratory.be.review.application.port.ReviewLikeRepository;
import site.travellaboratory.be.review.domain.ReviewLike;

public class FakeReviewLikeRepository implements ReviewLikeRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<ReviewLike> data = new ArrayList<>();

    @Override
    public Optional<ReviewLike> findByUserIdAndReviewId(Long userId, Long reviewId) {
        return data.stream()
            .filter(like -> Objects.equals(like.getUser().getId(), userId) && Objects.equals(like.getReview().getId(), reviewId))
            .findFirst();
    }

    @Override
    public ReviewLike save(ReviewLike reviewLike) {
        if (Objects.isNull(reviewLike.getId())) {
            ReviewLike newReviewLike = ReviewLike.builder()
                .id(autoGeneratedId.incrementAndGet())
                .user(reviewLike.getUser())
                .review(reviewLike.getReview())
                .status(reviewLike.getStatus())
                .createdAt(reviewLike.getCreatedAt())
                .updatedAt(reviewLike.getUpdatedAt())
                .build();
            data.add(newReviewLike);
            return newReviewLike;
        } else {
            data.removeIf(existingLike -> Objects.equals(existingLike.getId(), reviewLike.getId()));
            data.add(reviewLike);
            return reviewLike;
        }
    }
}
