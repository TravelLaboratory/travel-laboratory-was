package site.travellaboratory.be.test.mock.comment;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;
import site.travellaboratory.be.comment.application.port.CommentRepository;
import site.travellaboratory.be.comment.domain.Comment;
import site.travellaboratory.be.comment.domain.enums.CommentStatus;

public class FakeCommentRepository implements CommentRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<Comment> data = new ArrayList<>();

    @Override
    public Optional<Comment> findByIdAndStatusIn(Long commentId, List<CommentStatus> statuses) {
        return data.stream()
            .filter(comment -> Objects.equals(comment.getId(), commentId) && statuses.contains(comment.getStatus()))
            .findFirst();
    }


    @Override
    public Comment save(Comment comment) {
        if (Objects.isNull(comment.getId())) {
            Comment newComment = Comment.builder()
                .id(autoGeneratedId.incrementAndGet())
                .user(comment.getUser())
                .review(comment.getReview())
                .replyComment(comment.getReplyComment())
                .status(comment.getStatus())
                .build();
            data.add(newComment);
            return newComment;
        } else {
            data.removeIf(existingComment -> Objects.equals(existingComment.getId(), comment.getId()));
            data.add(comment);
            return comment;
        }
    }
}

