package site.travellaboratory.be.test.mock.review;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;
import site.travellaboratory.be.article.domain.Article;
import site.travellaboratory.be.review.application.port.ReviewRepository;
import site.travellaboratory.be.review.domain.Review;
import site.travellaboratory.be.review.domain.enums.ReviewStatus;

public class FakeReviewRepository implements ReviewRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<Review> data = new ArrayList<>();

    @Override
    public Optional<Review> findByArticleAndStatusInOrderByArticleDesc(Article article, List<ReviewStatus> status) {
        return data.stream()
            .filter(review -> review.getArticle().getId().equals(article.getId()) && status.contains(review.getStatus()))
            .findFirst();
    }

    @Override
    public Optional<Review> findByIdAndStatusIn(Long reviewId, List<ReviewStatus> status) {
        return data.stream()
            .filter(review -> review.getId().equals(reviewId) && status.contains(review.getStatus()))
            .findFirst();
    }

    public Review save(final Review review) {
        if (review.getId() == null) {
            final Review createdReview = Review.builder()
                .id(autoGeneratedId.incrementAndGet())
                .user(review.getUser())
                .article(review.getArticle())
                .title(review.getTitle())
                .representativeImgUrl(review.getRepresentativeImgUrl())
                .description(review.getDescription())
                .status(review.getStatus())
                .build();
            data.add(createdReview);
            return createdReview;
        } else {
            data.removeIf(item -> item.getId().equals(review.getId()));
            data.add(review);
            return review;
        }
    }
}
