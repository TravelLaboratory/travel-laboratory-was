package site.travellaboratory.be.test.mock.comment;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;
import site.travellaboratory.be.comment.application.port.CommentLikeRepository;
import site.travellaboratory.be.comment.domain.CommentLike;

public class FakeCommentLikeRepository implements CommentLikeRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<CommentLike> data = new ArrayList<>();

    @Override
    public Optional<CommentLike> findByUserIdAndCommentId(Long userId, Long commentId) {
        return data.stream()
            .filter(like -> Objects.equals(like.getUser().getId(), userId) && Objects.equals(like.getComment().getId(), commentId))
            .findFirst();
    }

    @Override
    public CommentLike save(CommentLike commentLike) {
        if (Objects.isNull(commentLike.getId())) {
            CommentLike newCommentLike = CommentLike.builder()
                .id(autoGeneratedId.incrementAndGet())
                .user(commentLike.getUser())
                .comment(commentLike.getComment())
                .status(commentLike.getStatus())
                .build();
            data.add(newCommentLike);
            return newCommentLike;
        } else {
            data.removeIf(existingLike -> Objects.equals(existingLike.getId(), commentLike.getId()));
            data.add(commentLike);
            return commentLike;
        }
    }
}
